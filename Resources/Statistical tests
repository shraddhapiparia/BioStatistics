1. Binomial distribution 
dbinom(x=10, size = 10, prob=0.8) # pr of 10 out of 10 surviving
dbinom(x=8, size=10, prob=0.8)    # pr of 8 out of 10 surviving
barplot(dbinom(0:40, size=40, prob=0.3))

pnorm() # probability norm
qnorm(c(0.05,0.95)) # quantile norm z score

2. Student t confidence interval

xbar=2.4; s=1.8; n=20
sem = s/sqrt(n)
me = qt(0.975, df=n-1)*sem # margin of error c(xbar, xbar-me, xbar+me) # print estimate + 95% CI


3. One sample t-test

## Check assumptions
table(iwk$group)
boxplot(Age1 ~ group, data=iwk)
with(iwk, tapply(Age1, group, sd))       # comparable sd's
t.test(pa.dm2$Charlson)

## Hand calculations for t.test, 95% CI
qt(0.975, df=35)           # critical value = 2.03
pt(-0.747, df=35)*2        # p-value = 0.46

# Paired-samples t-test
t.test(ht$SBP.Followup, ht$SBP.Baseline, paired=TRUE)

4. Welch t-test
t.test(Age1 ~ group, data=iwk, var.equal=FALSE)

5. Wilcoxon rank sum test
wilcox.test(iwtdaily ~ group, data=iwk) or wilcox.test(iwt.control, iwt.treatment)
## verify Wilcoxon normal approximation (illustration)
nC = table(iwk$group)[1]; nT = table(iwk$group)[2]; n=nC+nT
iwk$iwtd.rank = rank(iwk$iwtdaily)
with(iwk, tapply(iwtd.rank, group, mean))
rc = mean(iwk$iwtd.rank[iwk$group==1])
expected.rc = (n+1)/2
se.rc = sqrt(nT*(n+1)/(12*nC))
zstat = (rc-expected.rc)/se.rc
pvalue = 2*pnorm(-abs(zstat))
# Paired wilcoxon rank sum test
wilcox.test(iwk$PCS1, iwk$PCS2, paired=TRUE)
wilcox.test(iwk$PCS_change, mu=0)     # same

6. McNemar test
mcnemar.test(tab, correct=FALSE)
## McNemar exact test (binomial) & CI
# install.packages("exact2x2")
library(exact2x2)
mcnemarExactDP(x=9, m=11, n=161) # need total n for CI

7. Pearsons chi-square test
pch = chisq.test(tabD, correct=FALSE) # column/row order not important
### PCH, use exact null distribution, not chi^2(df=1) approximation
chisq.test(tabD, simulate.p.value=TRUE, B=1000000)   # permutation test

8. Fishers exact test
fisher.test(tabD)
# direct calculation
nC=407; nT=414; SC=58; ST=49
pC = SC/nC; pT = ST/nT
pbar = (SC+ST)/(nC+nT)
(zstat = (pT-pC)/sqrt(pbar*(1-pbar)*(1/nT+1/nC)))
zstat^2     # compare to X-squared
(pval = 2*pnorm(-abs(zstat)))


9. OR & 95% CI, Wald
# install.packages("epitools")
library(epitools)
oddsratio(tabS, method='wald')

10. Start from lec 8 and recheck with all homeworks
